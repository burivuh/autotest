import jenkins.model.Jenkins

if (!Jenkins.instance.getNode(node).toComputer().isOnline()) {
    currentBuild.result = 'ABORTED'
    error('node is offline')
}

if (Jenkins.instance.getNode(node).toComputer().countBusy() == Jenkins.instance.getNode(node).toComputer().countExecutors()){
    currentBuild.result = 'ABORTED'
    error('node is busy')
}

node(node){
    timeout(30) {
        stage('git') {
            deleteDir()
                git credentialsId: 'jenkins-github-ssh', branch: "master", url: 'git@github.com:mapsme/autotest.git' 
        }
        stage('check') {
    	dir('general-ui-autotests') {
            	if (node == "autotest") {
                		sh "python3 check_devices.py -p Android"
            	}
            	if (node == "naboo"){
                        	sh """python3 -m venv ./autotest 
                    	source ./autotest/bin/activate
                    	pip3 install -r requirements.txt 
                        python3 check_devices.py -p Android
                    	python3 check_devices.py -p IOS"""
            	}
    	}
        }
        
        stage("changes") {
    	dir('general-ui-autotests') {
            	try {
                	def ch
                	ch = readFile 'changes.txt'
                	emailext mimeType: 'text/html', body: "<pre>${ch}</pre>", subject: "Device statuses were changed! ${new Date()}",
                     to: 'k.kravchuk@mapswithme.com,a.blinchikov@corp.mail.ru'
            	} catch (Exception e) {
               	 //
            	}
    	   }
        }
    }
    
    
    
}